<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lidengxm&#39;s Blog</title>
    <link>https://lidengxm.github.io/</link>
    <description>Recent content on Lidengxm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 28 Sep 2023 23:40:16 +0800</lastBuildDate><atom:link href="https://lidengxm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>52两个链表的第一个公共节点</title>
      <link>https://lidengxm.github.io/posts/algorithm/52%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 28 Sep 2023 23:40:16 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/algorithm/52%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</guid>
      <description>剑指 Offer 52. 两个链表的第一个公共节点 链接：剑指 Offer 52. 两个链表的第一个公共节点 labuladong 题解思路 JZ52 两个链表的第一个公共节点 链接：JZ52 两个链表的第一个公共节点 题目描述 输入两个链表，找出它们的第一个公共节点。 如下面的两个链表**：** 在节点 c1 开始相交。 示例 1： 输入：intersectVal = 8, listA</description>
    </item>
    
    <item>
      <title>25合并两个排序的链表</title>
      <link>https://lidengxm.github.io/posts/algorithm/25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 28 Sep 2023 23:38:55 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/algorithm/25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
      <description>剑指 Offer 25. 合并两个排序的链表 剑指 Offer 25. 合并两个排序的链表 JZ25 合并两个有序的链表 JZ25 合并两个有序的链表 题目描述 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。 示例 1： 输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;g</description>
    </item>
    
    <item>
      <title>24反转链表</title>
      <link>https://lidengxm.github.io/posts/algorithm/24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 28 Sep 2023 23:37:17 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/algorithm/24%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>剑指 Offer 24. 反转链表 剑指 Offer 24. 反转链表 JZ24 反转链表 JZ24 反转链表 题目描述 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 示例: 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL 输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL 限制： 0 &amp;lt;= 节点个数 &amp;lt;= 5000 注意：本题与主站 206 题相同：https://leetcode-cn.com/problems/revers</description>
    </item>
    
    <item>
      <title>06从尾到头打印链表</title>
      <link>https://lidengxm.github.io/posts/algorithm/06%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 28 Sep 2023 23:34:11 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/algorithm/06%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>剑指 Offer 06. 从尾到头打印链表 剑指 Offer 06. 从尾到头打印链表 JZ6 从尾到头打印链表 JZ6 从尾到头打印链表 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 1： 输入：head = [1,3,2] 输出：[2,3,1] 限制： 0 &amp;lt;= 链表长度 &amp;lt;= 10000 解题思路 直接反转不好搞，可以通过借助额外空间，比如栈，将链表</description>
    </item>
    
    <item>
      <title>IO流知识图谱</title>
      <link>https://lidengxm.github.io/posts/java/io%E6%B5%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</link>
      <pubDate>Wed, 27 Sep 2023 23:23:43 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/io%E6%B5%81%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</guid>
      <description>IO 分类 字节流可以处理一切文件，而字符流只能处理文本 认识 IO IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。 Java 中是通过流处理 IO 的，那么什么是流？ 流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以</description>
    </item>
    
    <item>
      <title>HashMap详解</title>
      <link>https://lidengxm.github.io/posts/java/hashmap%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 27 Sep 2023 23:22:33 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/hashmap%E8%AF%A6%E8%A7%A3/</guid>
      <description>HashMap 基本用法 这篇文章将通过源码的方式，详细透彻地讲清楚 Java 的 HashMap，包括 hash 方法的原理、HashMap 的扩容机制、HashMap 的加载因子为什么是 0.75 而不是 0.6、0.8，以及 HashMap 为什么是线程不安全的，基本上 HashMap 的常见面试题 open in new window，都会在这一篇文章里讲明白。 HashMap 是 Java 中常用的</description>
    </item>
    
    <item>
      <title>ArrayList与LinkedList一网打通</title>
      <link>https://lidengxm.github.io/posts/java/arraylist%E4%B8%8Elinkedlist%E4%B8%80%E7%BD%91%E6%89%93%E9%80%9A/</link>
      <pubDate>Wed, 27 Sep 2023 23:20:18 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/arraylist%E4%B8%8Elinkedlist%E4%B8%80%E7%BD%91%E6%89%93%E9%80%9A/</guid>
      <description>集合框架结构 看一下集合框架的结构图 Java 集合框架分为两条支线：Collection 和 Map Collection，主要由 List、Set、Queue 组成 List 代表有序、可重复的集合，典型代表就是封装了动态数组的 ArrayList 和封装了链表的 LinkedList； Set 代表无序、不可重复的集合，典型代表就是 HashSet 和 T</description>
    </item>
    
    <item>
      <title>JUC并发编程八股</title>
      <link>https://lidengxm.github.io/posts/java/juc%E5%85%AB%E8%82%A1/</link>
      <pubDate>Mon, 25 Sep 2023 00:23:47 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/juc%E5%85%AB%E8%82%A1/</guid>
      <description>线程与进程篇 线程和进程的区别？ 在操作系统中，进程是指一个正在执行中的程序，而线程是进程的一部分，是一个程序中执行的代码片段。 进程是操作系统资源分配的最小单位，一个进程至少包括一个线程，进程拥有自己的内存空间、文件句柄、环境变量等系统资源。进程间相互独立，互不干扰，每个进程都拥有自</description>
    </item>
    
    <item>
      <title>计算机基础八股</title>
      <link>https://lidengxm.github.io/posts/java/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/</link>
      <pubDate>Mon, 25 Sep 2023 00:22:12 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/</guid>
      <description>计算机网络与操作系统的知识</description>
    </item>
    
    <item>
      <title>框架八股</title>
      <link>https://lidengxm.github.io/posts/java/%E6%A1%86%E6%9E%B6%E5%85%AB%E8%82%A1/</link>
      <pubDate>Mon, 25 Sep 2023 00:19:38 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/%E6%A1%86%E6%9E%B6%E5%85%AB%E8%82%A1/</guid>
      <description>框架面试题合集 spring 当涉及校招应届生的 Spring 框架相关面试题时，通常会着重考察基础知识和理解能力。以下是一些常见的 Spring 相关面试题，希望对你有所帮助： 什么是 Spring 框架？ 解释 Spring 框架的概念、作用和特点。 Spring 框架的核心模块是什么？ 提及 Spring 框架的核心模块，如 Spring Core、Spring Context、Spring</description>
    </item>
    
    <item>
      <title>Redis八股</title>
      <link>https://lidengxm.github.io/posts/java/redis%E5%85%AB%E8%82%A1/</link>
      <pubDate>Mon, 25 Sep 2023 00:18:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/redis%E5%85%AB%E8%82%A1/</guid>
      <description>Redis 是什么？使用场景有哪些？ Redis 是什么？ **Redis（Remote Dictionary Server）是一个开源的内存数据存储系统，它被广泛用作缓存、消息队列和数据库。**Redis 支持多种数据结构，包括字符串、列表、集合、有序集合、哈希等，并提供了丰富的操作命令，非常适合作为中间件使用 怎么使用？ 首先</description>
    </item>
    
    <item>
      <title>Bbb</title>
      <link>https://lidengxm.github.io/posts/tech/bbb/</link>
      <pubDate>Sat, 23 Sep 2023 20:49:14 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/tech/bbb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aaa</title>
      <link>https://lidengxm.github.io/posts/tech/aaa/</link>
      <pubDate>Sat, 23 Sep 2023 20:30:00 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/tech/aaa/</guid>
      <description>描述</description>
    </item>
    
    <item>
      <title>Java基础八股</title>
      <link>https://lidengxm.github.io/posts/java/java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/</link>
      <pubDate>Tue, 05 Sep 2023 00:18:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1/</guid>
      <description>整理的Java基础相关八股</description>
    </item>
    
    <item>
      <title>MySQL八股</title>
      <link>https://lidengxm.github.io/posts/java/mysql%E5%85%AB%E8%82%A1/</link>
      <pubDate>Tue, 05 Sep 2023 00:18:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/mysql%E5%85%AB%E8%82%A1/</guid>
      <description>整理的MySQL相关八股</description>
    </item>
    
    <item>
      <title>Redis scan命令学习</title>
      <link>https://lidengxm.github.io/posts/tech/tech1/</link>
      <pubDate>Wed, 30 Nov 2022 15:55:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/tech/tech1/</guid>
      <description>scan命令详解</description>
    </item>
    
    <item>
      <title>Redis scan命令学习</title>
      <link>https://lidengxm.github.io/posts/tech/test/</link>
      <pubDate>Wed, 30 Nov 2022 15:55:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/tech/test/</guid>
      <description>scan命令详解</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://lidengxm.github.io/posts/java/blog/</link>
      <pubDate>Thu, 05 May 2022 00:18:23 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/java/blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Life</title>
      <link>https://lidengxm.github.io/posts/life/life/</link>
      <pubDate>Thu, 05 May 2022 00:18:15 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/life/life/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Read</title>
      <link>https://lidengxm.github.io/posts/read/read/</link>
      <pubDate>Thu, 05 May 2022 00:18:06 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/read/read/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tech</title>
      <link>https://lidengxm.github.io/posts/tech/tech/</link>
      <pubDate>Thu, 05 May 2022 00:17:58 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/posts/tech/tech/</guid>
      <description>科技代码</description>
    </item>
    
    <item>
      <title>🤝友链</title>
      <link>https://lidengxm.github.io/links/</link>
      <pubDate>Sat, 06 Nov 2021 15:15:53 +0800</pubDate>
      
      <guid>https://lidengxm.github.io/links/</guid>
      <description>新建</description>
    </item>
    
    
    
    <item>
      <title>🙋🏻‍♂️关于我</title>
      <link>https://lidengxm.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lidengxm.github.io/about/</guid>
      <description>关于我 大四正在准备秋招 非科班转码一枚 想改变生活 我喜欢的名言 生活不是一潭死水，有信念才有希望！ 关于博客 框架 hugo 主题 PaperMod</description>
    </item>
    
  </channel>
</rss>
